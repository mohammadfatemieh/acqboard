For testing the RMAC unit, we have four files:


xbase: each line is the 7-bit xbase
X : each line is 2^7 16-bit signed ints, that represent fixed-point 2-s complement values in the sample buffer, in order. 
H : each line is 2^7 22-bit signed ints that represent fixed-point 2s-complement coefficients
Y : each line is a single 16-bit signed value, the expected value of the output. 

The testbench basically iterates through each line in the file and prints a resulting success or failure based on whether or not the output when MACDONE = 1 is equal to the value in Y



Things to check for:
System overflow via inputs of solid max-values
simple convolution of random sets of values with random coefficients, i.e. develop a good numerical model of what we're trying to do. 


To test the extended precision of the accumulator, we have x[n]= 1, and h[n] be a filter of 60 +1, followed by 60 -1


Now, the other big test is: 
take two integer vectors, of length 120.  Find their dot product. Round that product convergently to an 8.15 fixed-point value. Check for overflow. Compare. 

We've developed a fixed-point math implementation that lets us know exactly what we're really doing :)


2004.04.05 We have things working for edge cases and for large chunks of data. Wow. 

2004.04.18 Now, we modify the testbench, etc. to deal with the new, longer filters and the XC3S. Appears to work. 
