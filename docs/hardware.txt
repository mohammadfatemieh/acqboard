To do:

Change ADC buffer amps + filter stage into RRIO op-amps
Figure out some solution to the voltage problem. 


Simulations of butterworth input amps


So, there's this problem in that the system, as designed, uses non-RRIO adc buffer op-amps (the AD8021). This sucks, a lot. 

Because if we want to level-shift our input +-2.5 to 0-5V unipolar, we need a RRIO buffer. Plus, there are (IMHO) issues with the adc reliably sampling stuff that gets too close to its rails. 

So, ideally, the ADC could sample 0-4.096 V, and the inputs could be limited to +-2.048 V. Which is great, just switch in a new voltage regulator. We'll still
have to design-in a new buffer amp, but whatever, it may not really need to be RRIO if it can go to within 1V of the rails. 

But how do we find a 1.024V  voltage reference fto bias the buffer OAs?. Accuracy (as in initial, and TCO) isn't that big of a deal because it will
all be taken care of digitally. But the Ibias Is pretty high, and i'm not sure how it varies with amplitude, etc. 

Now, to pick a new Op-Amp:

part	price/160  Ibias (nA)	Vnoise	Voffset	SFDR	notes
AD8027		   4000/6000	
AD8510		   0.075				input v from -2 to +2.5
AD8671		   40		3	75		VOUT too low
AD820							Crappy THD+N
AD8651							VOUT too low
AD8627						-90 


Ha ha, we can just use the AD8027 :) We just need to buffer the voltage-divided reference through an OA. Although, ass, it's performance is mediocre in the THD+N measurement. 

However, the AD8519 supposedly has THD+N in unity gain of 120 dB, although there aren't really graphs. But it will most certainly work as an ADC driver, assuming that the voltage inputs aren't an issue. 

Now, for some math: 
our voltage reference is accurate to 0.1%, and drifts at 25 ppm/C
Resistors for dividing: 0.1%, drift 25 ppm/c

After contacting people, it looks like I may just be SOL wrt getting tempco-matched resistors.  But I can find 25ppm/C ones. 

Now, let's assume values of 10k each, and let's assume that TCo is positive. Now, the tempcos are potentially going to co-vary, because they are in close physical proximity. But ignore that -- let's assume R2 stays constant, and R1 varies at 25 ppm/C, for maximum difference. That works out to Vout = Vin(1+Tco)/(2+Tco), or (for 25 ppm/c) roughly 6 ppm/C. This puts a lot of the responsibility for stability on the voltage reference. We can use a OPA227 to buffer the output. 

--------------------------------------------------------------------------
Soma Command configuration
--------------------------------------------------------------------------
The soma command interface over fiber is spartan at best. 

Each transmit packet has a CMDST byte, a CMDID byte, and a CHKSUM byte.

The acqboard can be in one of three modes:
    Mode 0: normal mode, acquiring and filtering data. 
    Mode 1: offset disable -- dc offset compensation is disabled
    Mode 2: disables the input and disables offsets. Just outputs programmed sample buffer. 

Each of these modes has a "loading" bit.

Note that there is this "problem" with there only being one acqboard interface but two DSPs. this means channel modification commands have to be very careful!!!







--------------------------------------------------------------------------
So, general system properties, etc: 

AD8221 has amazing stuff... the new data sheet is an inspiration to all of humanity!

--------------------------------------------------------------------------
AA Filter component value selection:
--------------------------------------------------------------------------

For the LTC1653-3, the equation is:
R = 10k * (256kHz)/Fc; 

from the dsp folder:

The first filter has a -3 db at 10056.32 Hz
The second filter has a -3 db at 29829.14 Hz
The combined (both) filter has a -3 db at 9605.82 Hz
The combined (both) filter has a -96 db at 129371.07 Hz

We assume that their Fc == -3 dB point, thus 
The LTC1563-3 Resistors are 255k , part 9C08052A2553FKHFT from digikey




---------------------------------------------------------------------------
input stage
---------------------------------------------------------------------------
499 0hm .5% \0805 resistors, RR12P499DCT-ND from digikey


----------------------------------------------------------------------------
High pass Filter
----------------------------------------------------------------------------
Goals:
We use the OPA227UA in-amp as a 2-pole HPF

Rational for design: Assume that there's a 5 V difference between the output node and the input pin of the opamp. That means that there's a 5V drop across Ron+R1. But, then, the voltage across Ron varies as Ron/(Ron+R1). I.e. if R5 = 5k, ad max Ron = 50 ohms, then Ron will see 1/100th the voltage difference, and (as far as I can tell from the 

We end up with a first-order HPF with a pole at 1/RC. Assume Rs = 5k, and thus, we want HPF at:

50 Hz	 0.82 uF
200 Hz   0.22 uF
500 Hz = 0.12 uF




----------------------------------------------------------------------------
FPGA to S-3 in a day!
----------------------------------------------------------------------------
18 April 2004
So, today I'm going to explore the possibility of switching tothe 100-pin Spartan-3 -50 device. Why? 

1. A pack of 24 is only $18.00 each, and that price will come down
2. In 3 years, I'm sure they'll still be around, but cheaper. 
3. since I can get a large quantity now, availability isn't as much of a concern
4. They have dedicated 18x18 hardware multipliers, which should actually save me a lot of space. 
5. I'm wasting time worrying about this "does it fit" mentality -- I hope the mulipliers will save me enough space that the device will easily fit in this logic.  
6. They have a ton more ram (4x) which enables longer filters. This is a good thing because at the moment, I'm capped at a 120-tap filter. This sucks, because it will force me to use the approach for output frequency response I was considering earlier. 

basically, I don't just want stuff down by 96 dB at the 16 kHz edge, because 7 additional copies of the stopband are going to alias into my passband. But given length constraints on h[n], it was impossible to get a FIR filter with a stopband ~-110 dB down. The solution was to push the stopband start out to 19 khz, which would yes, allow for aliasing into the 10-16 kHz region of up to -20 dB. But we only cared about the 0-10kHz region.


Why this is a poor design decision: your output, by design, will have aliasing in the 10-16 kHz range, meaning that the output of the acqboard isn't "safe", i.e. it would need knowledgable post-processing to deal properly. 

Switching to a Spartan-3 lets me eliminate this by using a longer filter, giving me the 10-16 kHz response I need. 

7. It shouldn't take very long to make the switch; go modular design!

The multiplier in the current design (not including the accumulator) takes up 342 slices, i.e. 312 flip flops and 366 LUTs. That's 44% of the design!




There are three things we'll need to change:
1. RMAC hardware: 
    switch multiplier to use the 18x18 hardware mults
    change expected pipeline delay
    So, it looks as if, since XST is inferring things correctly, we don't need to actually explicitly declare them. This strongly suggests that our pipeline delays haven't changed either. 



2. Buffers.
   Each BlockSelect+ ram block has 4x the ram of one in a Spartan-IIE, but there are half as many. The net result is that we have double the ram we did before. We want to effectively double the amount of storage for each buffer, i.e. 256 16-bit words. This means each BlockSelect+ ram block can hold 4 buffers. We will need 3 of them to store all sample buffers. This will also necessitate widening the AIN, AOUT busses from 7 to 8 bits. 
  Added extra pipeline stage to meet timing requirements. 
3. Filter
   Simple to do with a single buffer. 
  Added extra pipeline stage to meet timing requiremetns. 

4. EEPROM interface
   Remapped some of the EEPROM so the loader can still sequentially load stuff. 
5. Control
   Had to be modified as a result of the new EEPROM addrs. Note now that we use DATA[7:0] 

