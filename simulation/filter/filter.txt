This is our attempt to simulate the entire filtering subsystem. 

We combine the Input/Offset block, the sample buffer, the RMAC control, the Filter Array, the RMAC, and read the resulting Y output values. We try and use the same signal names as are used in the actual acqboard. 

The challenge here is the delay and thus sample offset that arise from a downsampling system -- the system itself is fundamentally not time invariant. Thus to accurately simulate the output, and compare, we must consider this delay. 

This is done by prefixing any input vector with an impulse surrounded by silence. By comparing the resulting subsampled portions of the impulse response, we can determine the offset of the input vector and thus which output samples to use. 

The resulting unit test code is somewhat unique in that it actually writes a file of outputs that we then run analysis on; this means the resulting unit test code will be a bit different. 


Thus, we ultimately want: 
    filter(runname), which will call modelsim appropriately with the right
    generics set to have the vhdl read in:

    runname.adcin.0.dat .. runname.adcin.9.dat,
    runname.filter.dat

    And then -we- should also be able to take that data, read it in, perform our fixed-point convolution on it, and compare it with the output. 

    

We begin by writing in filter array coefficients from the file filter.dat

Then we begin the insample filtering. Whee. 

We store the output in a file, again. 

we have a filter.dat file which we keep filter coefficients in, as 22-bit signed ints. 

The money here comes from analysis. We can obviously filter and save the output. 

First, we wish to understand the relative downsampling locations and
delays from the output of the simulation. This is going to be determined empirically, because well, i'm lame like that :) The best solution would be to preface each ADCIN signal with an impulse to allow for correct scaling and latency detection. 


simy.m ::


We want a script which will take in:
outputs.dat : the 1x10 vector of outputs
adcin.0-4.dat : the input vectors
h : the filter

our goal is the output of a vector "op" : that is, a vector of the exact dimensions of output, aligned to output, but is essentially "output" with all the math done in matlab. 

This will let us measure per-sample MMSE, and make sure we're getting all of our math factors correct. 


Analysis:

The pwelch periodogram with a hanning window of 512, a fft length of 512, and no overlap, appears to give the best visual output. Open questions:
1. Why does the output of the pure sine input (output(:,3)) look like such total crap?
2. why is the peak always down by so much? I.e. the random output data is down by -55 dB. 

